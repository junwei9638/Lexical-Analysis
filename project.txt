// 10627131李峻瑋 Ｘcode version:11.1
#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <sstream>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <cstdlib>
#include <cctype>
#include <algorithm>

using namespace std;

static string FileName = "\0";
static ifstream input;
static ofstream output;

typedef struct Token {
    string tokenName;
    int table = 0;
    int value = 0;
} Token;


vector<Token> InstrucionTable;
vector<Token> PseudoTable;
vector<Token> RegisterTable;
vector<Token> DelimiterTable;
Token SymbolTable[100];
Token IntegerTable[100];
Token StringTable[100];

vector<Token> Tokens;

void ReadTable() {
    string tempTable;
    Token NullData;
    Token tempData ;
    
    for( int i = 1 ; i <= 4 ; i++ ) {
        
        string fileName = "Table" + to_string( i ) + ".table" ;
        input.open( fileName.c_str() );
        
        while( !input.eof() ) {

            input >> tempData.value ;
            input >> tempData.tokenName ;
            tempData.table = i;
            
            if( i == 1 ) InstrucionTable.push_back( tempData ) ;
            if( i == 2 ) PseudoTable.push_back( tempData ) ;
            if( i == 3 ) RegisterTable.push_back( tempData ) ;
            if( i == 4 ) DelimiterTable.push_back( tempData ) ;
        
            //cout<<tempData.table<<","<<tempData.value<<"  "<<tempData.tokenName<< endl;
        } //  done
        input.close();
    } // for
    
} // ReadTable()

bool WhichType( string token ) {
    string Upper, Lower = "\0";
    
    Upper = token.substr(0, token.size() ) ;
    Lower = token.substr(0, token.size() ) ;
    for( int i = 0 ; i < token.size() ; i++ ) Upper[i] = toupper( Upper[i] );
    for( int i = 0 ; i < token.size() ; i++ ) Lower[i] = tolower( Lower[i] );
    
    
    for( int i = 0 ;  i < InstrucionTable.size() ; i++ ) {
        if ( InstrucionTable[i].tokenName == token || InstrucionTable[i].tokenName ==Upper || InstrucionTable[i].tokenName ==Lower  ) {
            Tokens.push_back( InstrucionTable[i] ) ;
            output << "("<< InstrucionTable[i].table << ","<< InstrucionTable[i].value << ")";
            return true;
        } // same
    } // find instruction
        
    for( int i = 0 ;  i < PseudoTable.size() ; i++ ) {
        if ( PseudoTable[i].tokenName == token || PseudoTable[i].tokenName == Upper || PseudoTable[i].tokenName == Lower ) {
            Tokens.push_back( PseudoTable[i] );
            output << "("<< PseudoTable[i].table << ","<< PseudoTable[i].value << ")";
            return true;
        } // same
    } // find pseudo
        
    for( int i = 0 ;  i < RegisterTable.size() ; i++ ) {
        if ( RegisterTable[i].tokenName == token || RegisterTable[i].tokenName == Upper || RegisterTable[i].tokenName == Lower  ) {
            Tokens.push_back( RegisterTable[i] );
            output << "("<< RegisterTable[i].table << ","<< RegisterTable[i].value << ")";
            return true;
        } // same
    } // find register
        
    for( int i = 0 ;  i < DelimiterTable.size() ; i++ ) {
        if ( DelimiterTable[i].tokenName == token  ) {
            Tokens.push_back( DelimiterTable[i] );
            output << "("<< DelimiterTable[i].table << ","<< DelimiterTable[i].value << ")";
            return true;
        } // same
    } // find delimiter
    
    return false;
    
} // WhichType

bool isDelimiter( string token ) {
    for( int i = 0 ;  i < DelimiterTable.size() ; i++ ) {
        if ( DelimiterTable[i].tokenName == token  ) return true;
    } // find delimiter
    return false;
} // isInt

bool isInt( string token ) {
    for( int i = 0; i < token.size()  ; i ++ ) if ( !isxdigit(token[i]) && token[i] != 'H' ) return false;
    return true;
} // isInt

void StringProcess( string token ) {
    int AsciiSum, hValue = 0;
    bool done  = false;
    Token tempToken;
    for( int i = 0 ; i < token.size() ; i++ ) AsciiSum += (int)token[i] ;
    hValue = AsciiSum % 100;
    
    for( int i = 0 ; i < 100 ; i ++ ) {
        if( StringTable[i].tokenName == token ) {
            tempToken.tokenName = StringTable[i].tokenName;
            tempToken.table = 7;
            tempToken.value = StringTable[i].value;
            Tokens.push_back(tempToken);
            output << "("<< tempToken.table << ","<< tempToken.value << ")";
            done = true;
        } // if
    } // find same in table
    
    while( !done ) {
        if( StringTable[hValue].value != 0 ) {
            hValue++;
            if ( hValue == 100 ) hValue = hValue - 100;
        } // collision
        
        else {
            tempToken.tokenName = token;
            tempToken.table = 7;
            tempToken.value = hValue;
            StringTable[hValue] = tempToken;
            Tokens.push_back(tempToken);
            output << "("<< tempToken.table << ","<< tempToken.value << ")";
            done = true;
        } // done
    } // put in table
    
} // StringProcess

void IntProcess( string token ) {
    int AsciiSum, hValue = 0;
    bool done  = false;
    Token tempToken;
    for( int i = 0 ; i < token.size() ; i++ ) AsciiSum += (int)token[i] ;
    hValue = AsciiSum % 100;
    
    for( int i = 0 ; i < 100 ; i ++ ) {
        if( IntegerTable[i].tokenName == token ) {
            tempToken.tokenName = IntegerTable[i].tokenName;
            tempToken.table = 6;
            tempToken.value = IntegerTable[i].value;
            Tokens.push_back(tempToken);
            output << "("<< tempToken.table << ","<< tempToken.value << ")";
            done = true;
        } // if
    } // find same in table
    
    while( !done ) {
        if( IntegerTable[hValue].value != 0 ) {
            hValue++;
            if ( hValue == 100 ) hValue = hValue - 100;
        } // collision
        
        else {
            tempToken.tokenName = token;
            tempToken.table = 6;
            tempToken.value = hValue;
            IntegerTable[hValue] = tempToken;
            Tokens.push_back(tempToken);
            output << "("<< tempToken.table << ","<< tempToken.value << ")";
            done = true;
        } // done
    } // put in table
    
} // IntProcess

void SymbolProcess( string token ) {
    int AsciiSum, hValue = 0;
    bool done  = false;
    Token tempToken;
    for( int i = 0 ; i < token.size() ; i++ ) AsciiSum += (int)token[i] ;
    hValue = AsciiSum % 100;
    
    for( int i = 0 ; i < 100 ; i ++ ) {
        if( SymbolTable[i].tokenName == token ) {
            tempToken.tokenName = SymbolTable[i].tokenName;
            tempToken.table = 5;
            tempToken.value = SymbolTable[i].value;
            Tokens.push_back(tempToken);
            output << "("<< tempToken.table << ","<< tempToken.value << ")";
            done = true;
        } // if
    } // find same in table
    
    while( !done ) {
        if( SymbolTable[hValue].value != 0 ) {
            hValue++;
            if ( hValue == 100 ) hValue = hValue - 100;
        } // collision
        
        else {
            tempToken.tokenName = token;
            tempToken.table = 5;
            tempToken.value = hValue;
            SymbolTable[hValue] = tempToken;
            Tokens.push_back(tempToken);
            output << "("<< tempToken.table << ","<< tempToken.value << ")";
            done = true;
        } // done
    } // put in table
    
    
} // SymbolProcess

void InputFileAndAnalyze() {
    string wholeLine;
    vector<char> CutLetters;
    
    while( getline( input, wholeLine ) ) {
        output << wholeLine << endl;

        for( int i = 0 ; i < wholeLine.size() ; i ++ ) {
            
            string charToString(1, wholeLine[i]);
            
            if(wholeLine[i] != ' ' &&wholeLine[i] != '\n' &&wholeLine[i] != '\r' &&wholeLine[i] != '/t' &&wholeLine[i] != '\0'){
                if( wholeLine[i] == ';' ) {
                    WhichType( charToString );
                    break;
                } // comment case
                
                if( isDelimiter( charToString ) ) {
                    
                    string CutToken( CutLetters.begin(), CutLetters.end() ) ;
                    if( CutToken != "\0" ) {
                        if( !WhichType( CutToken ) ) {
                            if ( charToString == "'" && Tokens[ Tokens.size() - 1 ].tokenName == "'" ) StringProcess( CutToken );
                            else if ( isInt( CutToken ) ) IntProcess( CutToken );
                            else SymbolProcess( CutToken );
                        } // symbol,int or string
                        
                        CutLetters.clear();
                    } // delimiter with token in CutLetters
                    
                    WhichType( charToString );
                } // Delimiter Case
                
                else CutLetters.push_back( wholeLine[i] ) ;
            } // letter process
            
            else {
                string CutToken( CutLetters.begin(), CutLetters.end() ) ;
                if( CutToken != "\0" ) {
                    if( !WhichType( CutToken ) ) {
                        if ( charToString == "'" && Tokens[ Tokens.size() - 1 ].tokenName == "'" ) StringProcess( CutToken );
                        else if ( isInt( CutToken ) ) IntProcess( CutToken );
                        else SymbolProcess( CutToken );
                    } // symbol,int or string

                    CutLetters.clear();
                } // delimiter with token in CutLetters
                
            } // put char to command
        
        } // line analyze
        
        
        string CutToken( CutLetters.begin(), CutLetters.end() ) ;
           if( CutToken != "\0" ) {
               if( !WhichType( CutToken ) ) {
                   if ( isInt( CutToken ) ) IntProcess( CutToken );
                   else SymbolProcess( CutToken );
               } // int or string , last token would not be string
               
               CutLetters.clear();
           } // last token left in CutLetters
        
        output << endl;
    } // input done
    
    
    /*for( int i = 0 ; i < Tokens.size() ; i ++ ) {
        cout << Tokens[i].table << " ," << Tokens[i].value << " ,"<<  Tokens[i].tokenName<<endl;
    } // for*/
    //for( int i = 0 ; i < 100 ; i ++ ) cout << SymbolTable[i].value << " "<<SymbolTable[i].tokenName << endl;

} // InputFile



int main() {
    bool missionEnd = false;

    ReadTable();
    
    do {
        cout << "Please enter the file name you want to Lexical Analyze or [0] to quit:" << endl;
        cin >> FileName;
        
        if ( FileName == "0" ) {
            missionEnd = true;
            cout << endl;
        } // quit
        
        else {
            string inputFileName = FileName + ".txt";
            //string binFileName = "x86_input.txt";
            input.open( inputFileName );
            
            
            if ( input.is_open() ) {
                output.open( FileName + "_output.txt" );
                InputFileAndAnalyze();
                input.close();
                output.close() ;
            } // file open successfully
            
            else {
                cout << endl << "*****         file does not exist !       *****" << endl << endl;
                missionEnd = false;
            } // no such file
        } // continue
    } while ( !missionEnd );

    
} // main()
